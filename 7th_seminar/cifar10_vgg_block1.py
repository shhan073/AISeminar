# -*- coding: utf-8 -*-
"""cifar10_vgg_block1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vn5miD2UHuTq6kQsOcXOy8EgVIwsTgLN
"""

# import tensorflow
# from tensorflow import keras
print(keras.__version__) # 2.7.0

from keras.datasets import cifar10
from keras import Sequential, Model
from keras.utils.np_utils import to_categorical
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from matplotlib import pyplot as plt
import numpy as np

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
# One hot Encoding
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

model = Sequential()
# 'padding = same' means "making input and output size as same"
# 'padding = varid'
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))
model.add(Dense(10, activation='softmax'))
model.summary()

from tensorflow.keras import optimizers
# gd means gradient decent, SGD is stochastic gradient decent
# for minimize error, decent is used
# for visualization, acent will be used
sgd = optimizers.SGD(learning_rate=0.001, momentum=0.9) 
# optimizers provided by tensorflow.keras only, not by keras

# compile model
model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
epochs = 50
batch_size = 64

hist = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=epochs, batch_size=batch_size)
scores = model.evaluate(x_test, y_test)

model.predict(x_test)



acc = hist.history['accuracy']
loss = hist.history['loss']
val_acc = hist.history['val_accuracy']
val_loss = hist.history['val_loss']
epochs = range(1, len(acc)+1)

plt.plot(epochs, acc, 'blue', label='train acc')
plt.plot(epochs, val_acc, 'orange', label='val acc')
plt.legend(loc='lower right')
plt.show()
plt.plot(epochs, loss, 'blue', label='train loss')
plt.plot(epochs, val_loss, 'orange', label='val loss')
plt.legend(loc='upper right')
plt.show()
