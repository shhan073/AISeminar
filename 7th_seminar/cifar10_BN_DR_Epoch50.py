# -*- coding: utf-8 -*-
"""cifar10_BN_DR_Epoch50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MoMRXZXYSOYeXD9nkBtEDo2wYhdakG-A
"""

from keras.datasets import cifar10
from keras.models import Sequential
# from keras import layers : layers.Dense, layers.Conv2D
from keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
# from tensorflow.keras.utils import to_categorical
from keras.utils.np_utils import to_categorical
from matplotlib import pyplot as plt
import numpy as np

batch_size = 32
ncl = 10
epochs = 50
 
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
# One hot Encoding
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
 
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', input_shape=(32,32,3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
 
model.add(Flatten())
model.add(Dense(512))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(ncl))
model.add(Activation('softmax'))
model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
 
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
 
hist = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=epochs, batch_size=batch_size, verbose=2)
scores = model.evaluate(x_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

acc = hist.history['accuracy']
loss = hist.history['loss']
val_acc = hist.history['val_accuracy']
val_loss = hist.history['val_loss']
epochs = range(1, len(acc)+1)

plt.plot(epochs, acc, 'b', label='train acc')
plt.plot(epochs, val_acc, 'r', label='val acc')
plt.legend(loc='lower right')
plt.show()
plt.plot(epochs, loss, 'b', label='train loss')
plt.plot(epochs, val_loss, 'r', label='val loss')
plt.legend(loc='upper right')
plt.show()